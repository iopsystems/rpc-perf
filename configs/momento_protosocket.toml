# An example configuration for benchmarking Momento (https://www.gomomento.com)
# and demonstrating the use of the preview functionality for collections. Each
# command family is using its own keyspace and covers key-value, hash, list,
# set, and sorted set.
#
# Expiration: unless otherwise specified, the default TTL of 15 minutes will be
# used. Commands which operate on collections will not refresh the TTL for the
# collection.

[general]
# specify the protocol to be used
protocol = "momento_protosocket"
# the interval for stats integration and reporting
interval = 60
# the number of intervals to run the test for
duration = 300
# run the admin thread with a HTTP listener at the address provided, this allows
# stats exposition via HTTP
admin = "127.0.0.1:9090"
# optionally, set an initial seed for the PRNGs used to generate the workload.
# The default is to intialize from the OS entropy pool.
#initial_seed = "0"

#[metrics]
# output file for detailed stats during the run
#output = "stats.json"
# format of the output file (possible values are json, msgpack, parquet)
#format = "json"
# optionally specify batch size for parquet row groups
# only valid for parquet output
#batch_size = 100_000
# optionally specify histogram type (can be standard (default) or sparse)
# only valid for parquet output
#histogram = "sparse"
# optionally, specify the sampling interval for metrics. Input is a string
# with the unit attached; for example "100ms" or "1s". Defaults to 1s.
#interval = "1s"

[debug]
# choose from: error, warn, info, debug, trace
log_level = "info"
# optionally, log to the file below instead of standard out
# log_file = "rpc-perf.log"
# backup file name for use with log rotation
log_backup = "rpc-perf.log.old"
# trigger log rotation when the file grows beyond this size (in bytes). Set this
# option to '0' to disable log rotation.
log_max_size = 1073741824

[target]
# we need to specify endpoints for momento-protosocket
endpoints = [
	"127.0.0.1:9004",
]
# specify the name of the target cache
cache_name = "preview-cache"

[client]
# number of threads used to drive client requests
threads = 4
# number of protosocket clients to initialize, each maintains at least one TCP stream
poolsize = 1
# an upper limit on the number of concurrent requests per protosocket client
concurrency = 20
# the connect timeout in milliseconds
connect_timeout = 10000
# set the timeout in milliseconds
request_timeout = 1000

[workload]
# the number of threads that will be used to generate the workload
threads = 1

[workload.ratelimit]
# set a global ratelimit for the workload
start = 50

# An example keyspace showcasing the use of the `key-value` family of commands,
# the only one supported by momento-protosocket at the moment.
#
# Note that we can constrain the number of keys in the keyspace and specify that
# the generated values are random bytes with 128B values.
[[workload.keyspace]]
# sets the relative weight of this keyspace: defaults to 1
weight = 1
# sets the length of the key, in bytes
klen = 32
# sets the number of keys that will be generated
nkeys = 1_000_000
# sets the value length, in bytes
vlen = 128
# optionally, specify an approximate compression ratio for the value payload.
# Defaults to 1.0 meaning the message is high-entropy and not compressible.
compression_ratio = 1.0
# use random bytes for the values
vkind = "bytes"
# override the default ttl for this keyspace setting it to 15 minutes
ttl = "15m"
# controls what commands will be used in this keyspace
commands = [
	# get a value
	{ verb = "get", weight = 80 },
	# set a value
	{ verb = "set", weight = 20 },
	# delete a value
	{ verb = "delete", weight = 0 },
]
