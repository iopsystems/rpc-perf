# An example configuration for benchmarking Momento (https://www.gomomento.com)
# and demonstrating the use of the preview functionality for collections. Each
# command family is using its own keyspace and covers key-value, hash, list,
# set, and sorted set.
#
# Expiration: unless otherwise specified, the default TTL of 15 minutes will be
# used. Commands which operate on collections will not refresh the TTL for the
# collection.

[general]
# specify the protocol to be used
protocol = "momento"
# the interval for stats integration and reporting
interval = 60
# the number of intervals to run the test for
duration = 300
# optionally, we can write some detailed stats to a file during the run
#metrics_output = "stats.json"
# run the admin thread with a HTTP listener at the address provided, this allows
# stats exposition via HTTP
admin = "127.0.0.1:9090"
# optionally, set an initial seed for the PRNGs used to generate the workload.
# The default is to intialize from the OS entropy pool.
#initial_seed = "0"

[debug]
# choose from: error, warn, info, debug, trace
log_level = "info"
# optionally, log to the file below instead of standard out
# log_file = "rpc-perf.log"
# backup file name for use with log rotation
log_backup = "rpc-perf.log.old"
# trigger log rotation when the file grows beyond this size (in bytes). Set this
# option to '0' to disable log rotation.
log_max_size = 1073741824

[target]
# we don't need to specify any endpoints for momento
endpoints = []
# specify the name of the target cache
cache_name = "preview-cache"

[client]
# number of threads used to drive client requests
threads = 4
# number of gRPC clients to initialize, each maintains at least one TCP stream
poolsize = 1
# an upper limit on the number of concurrent requests per gRPC client
concurrency = 20
# the connect timeout in milliseconds
connect_timeout = 10000
# set the timeout in milliseconds
request_timeout = 1000

[workload]
# the number of threads that will be used to generate the workload
threads = 1

[workload.ratelimit]
# set a global ratelimit for the workload
start = 50

# An example keyspace showcasing the use of the `key-value` family of commands.
#
# Note that we can constrain the number of keys in the keyspace and specify that
# the generated values are random bytes with 128B values.
[[workload.keyspace]]
# sets the relative weight of this keyspace: defaults to 1
weight = 1
# sets the length of the key, in bytes
klen = 32
# sets the number of keys that will be generated
nkeys = 1_000_000
# sets the value length, in bytes
vlen = 128
# optionally, specify an approximate compression ratio for the value payload.
# Defaults to 1.0 meaning the message is high-entropy and not compressible.
compression_ratio = 1.0
# use random bytes for the values
vkind = "bytes"
# override the default ttl for this keyspace setting it to 15 minutes
ttl = "15m"
# controls what commands will be used in this keyspace
commands = [
	# get a value
	{ verb = "get", weight = 80 },
	# set a value
	{ verb = "set", weight = 20 },
	# delete a value
	{ verb = "delete", weight = 0 },
]

# An example keyspace showcasing the use of the `dictionary` family of commands.
#
# Note that we use the inner key generator to produce `fields` for these
# operations. Here we have specified that the value generator produces `i64`
# values so that we can mix increment and set operations together without
# producing errors.
[[workload.keyspace]]
# sets the relative weight of this keyspace: defaults to 1
weight = 1
# sets the length of the key, in bytes
klen = 24
# sets the number of keys that will be generated
nkeys = 1_000_000
# sets the length of the inner key, in bytesp
inner_keys_klen = 4
# sets the number of inner keys that will be generated
inner_keys_nkeys = 1_000
# sets the value types to integers so we can mix increment with set
vkind = "i64"
# controls what commands will be used in this keyspace
commands = [
	# request a field from a dictionary
	{ verb = "dictionary_get", weight = 30 },
	# set cardinality > 1 to get multiple fields
	{ verb = "dictionary_get", weight = 10, cardinality = 5 },

	# increment a value for a field in the dictionary
	{ verb = "dictionary_increment", weight = 10 },

	# retrieve an entire dictionary
	{ verb = "dictionary_fetch", weight = 5 },

	# delete a field from a dictionary
	{ verb = "dictionary_delete", weight = 10 },
	# set cardinality > 1 to remove multiple fields
	{ verb = "dictionary_delete", weight = 5, cardinality = 5 },

	# set a field in the dictionary
	{ verb = "dictionary_set", weight = 20 },
	# set cardinality > 1 to set multiple fields
	{ verb = "dictionary_set", weight = 5, cardinality = 5 },

	# delete an entire dictionary
	{ verb = "delete", weight = 5 }
]

# An example keyspace showcasing the use of the `list` family of commands.
#
# Note that we use the inner key generator to produce `elements` for these
# operations. This provides more control than using the value generator would.
[[workload.keyspace]]
# sets the relative weight of this keyspace: defaults to 1
weight = 1
# sets the length of the key, in bytes
klen = 20
# sets the number of keys that will be generated
nkeys = 1_000_000
# sets the length of the inner key, in bytesp
inner_keys_klen = 4
# sets the number of inner keys that will be generated
inner_keys_nkeys = 1_000
# controls what commands will be used in this keyspace
commands = [
	# retrieves all elements in a list
	{ verb = "list_fetch", weight = 5 },

	# retrieves the length of the list
	{ verb = "list_length", weight = 4 },

	# removes and retrieves an element from the back of a list
	{ verb = "list_pop_back", weight = 20 },

	# removes and retrieves an element from the front of a list
	{ verb = "list_pop_front", weight = 20 },

	# pushes an element to the back of a list
	{ verb = "list_push_back", weight = 5 },
	# with truncate to trim the list
	{ verb = "list_push_back", weight = 10, truncate = 10 },
	# with cardinality to use `list_concat_back` and with truncate to trim
	{ verb = "list_push_back", weight = 10, cardinality = 3, truncate = 10 },

	# pushes an element to the front of a list
	{ verb = "list_push_front", weight = 5 },
	# with truncate to trim the list
	{ verb = "list_push_front", weight = 10, truncate = 10 },
	# with cardinality to use `list_concat_front` and with truncate to trim
	{ verb = "list_push_front", weight = 10, cardinality = 3, truncate = 10 },

	# delete an entire list
	{ verb = "delete", weight = 1 },
]

# An example keyspace showcasing the use of the `sorted set` family of commands.
#
# Note that we use the inner key generator to produce `elements` for these
# operations. The values are `f64` so we do not need to specify parameters for
# the value generator.
[[workload.keyspace]]
# sets the relative weight of this keyspace: defaults to 1
weight = 1
# sets the length of the key, in bytes
klen = 16
# sets the number of keys that will be generated
nkeys = 1_000_000
# sets the length of the inner key, in bytesp
inner_keys_klen = 4
# sets the number of inner keys that will be generated
inner_keys_nkeys = 1_000
# controls what commands will be used in this keyspace
commands = [
	# adds an element to a sorted set
	{ verb = "sorted_set_put", weight = 5 },
	# with cardinality > 1 to add multiple elements
	{ verb = "sorted_set_put", weight = 5, cardinality = 5 },

	# NOTE: some ranges cannot be represented currently, specifically where
	# start is positive and end is some negative index below -1

	# get a all elements in a sorted set, sorted by index
	{ verb = "sorted_set_range", weight = 5 },
	# get a range of elements in a sorted set, by index from 0..end
	{ verb = "sorted_set_range", weight = 5, end = 5 },
	# get a range of elements in a sorted set, by index from 5..10
	{ verb = "sorted_set_range", weight = 5, start = 5, end = 10 },
	# get a range of elements in a sorted set, by score with scores from -1..1
	{ verb = "sorted_set_range", weight = 5, start = -1, end = 1, by_score = true },

	# get the score for an element in a sorted set
	{ verb = "sorted_set_get_score", weight = 5 },
	# with cardinality > 1 to get scores for multiple elements
	{ verb = "sorted_set_get_score", weight = 5, cardinality = 5 },

	# remove an element from a sorted set
	{ verb = "sorted_set_remove", weight = 2 },
	# with cardinality > 1 to remove multiple elements
	{ verb = "sorted_set_remove", weight = 2, cardinality = 5 },

	# delete an entire sorted set
	{ verb = "delete", weight = 1 },

	# get the rank of an element in a sorted set
	{ verb = "sorted_set_get_rank", weight = 40 },

	# adds to the value of an element in a sorted set
	{ verb = "sorted_set_increment", weight = 25 },
]

# An example keyspace showcasing the use of the `set` family of commands.
#
# Note that we use the inner key generator to produce `elements` for these
# operations. This provides more control than using the value generator would.
[[workload.keyspace]]
# sets the relative weight of this keyspace: defaults to 1
weight = 1
# sets the length of the key, in bytes
klen = 8
# sets the number of keys that will be generated
nkeys = 1_000_000
# sets the length of the inner key, in bytesp
inner_keys_klen = 4
# sets the number of inner keys that will be generated
inner_keys_nkeys = 1_000
# controls what commands will be used in this keyspace
commands = [
	# adds an element to a set
	{ verb = "set_add_element", weight = 60 },
	# set the cardinality > 1 to add mutiple elements
	{ verb = "set_add_element", weight = 5, cardinality = 5 },

	# retrieve all elements in the set
	{ verb = "set_fetch", weight = 20},

	# remove an element from the set
	{ verb = "set_remove_element", weight = 5},
	# set the cardinality > 1 to remove multiple elements
	{ verb = "set_remove_element", weight = 5, cardinality = 5 },

	# remove an entire set with delete
	{ verb = "delete", weight = 5 }
]
