# An example configuration for benchmarking Redis and demonstrating using
# several keyspaces to test a variety of command families. Each command family
# is using its own keyspace and covers key-value, hash, list, set, and sorted
# set.

[general]
# specify the protocol to be used
protocol = "resp"
# the interval for stats integration and reporting
interval = 60
# the number of intervals to run the test for
duration = 300
# optionally, we can write some detailed stats to a file during the run
#json_output = "stats.json"
# run the admin thread with a HTTP listener at the address provided, this allows
# stats exposition via HTTP
admin = "127.0.0.1:9090"
# optionally, set an initial seed for the PRNGs used to generate the workload.
# The default is to intialize from the OS entropy pool.
#initial_seed = "0"

[debug]
# choose from: error, warn, info, debug, trace
log_level = "info"
# optionally, log to the file below instead of standard out
# log_file = "rpc-perf.log"
# backup file name for use with log rotation
log_backup = "rpc-perf.log.old"
# trigger log rotation when the file grows beyond this size (in bytes). Set this
# option to '0' to disable log rotation.
log_max_size = 1073741824

[target]
# specify one or more endpoints as IP:PORT pairs
endpoints = [
	"127.0.0.1:6379",
]

[client]
# number of threads used to drive client requests
threads = 4
# the total number of connections to each endpoint
poolsize = 20
# the connect timeout in milliseconds
connect_timeout = 10000
# set the timeout in milliseconds
request_timeout = 1000

[workload]
# the number of threads that will be used to generate the workload
threads = 1
# set a global ratelimit for the workload
ratelimit = 10_000

# An example keyspace showcasing the use of the `key-value` family of commands.
#
# Note that we can constrain the number of keys in the keyspace and specify that
# the generated values are random bytes with 128B values.
[[workload.keyspace]]
# sets the relative weight of this keyspace: defaults to 1
weight = 1
# sets the length of the key, in bytes
klen = 32
# sets the number of keys that will be generated
nkeys = 1_000_000
# sets the value length, in bytes
vlen = 128
# use random bytes for the values
vkind = "bytes"
# optionally: specify a TTL for the keys, by default there is no expiration
# ttl = "15m"
# controls what commands will be used in this keyspace
commands = [
	# get a value
	{ verb = "get", weight = 80 },
	# set a value
	{ verb = "set", weight = 20 },
	# delete a value
	{ verb = "delete", weight = 0 },
]

# An example keyspace showcasing the use of the `hash` family of commands.
#
# Note that we use the inner key generator to produce `fields` for these
# operations. Here we have specified that the value generator produces `i64`
# values so that we can mix increment and set operations together without
# producing errors.
[[workload.keyspace]]
# sets the relative weight of this keyspace: defaults to 1
weight = 1
# sets the length of the key, in bytes
klen = 24
# sets the number of keys that will be generated
nkeys = 1_000_000
# sets the length of the inner key, in bytesp
inner_keys_klen = 4
# sets the number of inner keys that will be generated
inner_keys_nkeys = 1_000
# sets the value types to integers so we can mix increment with set
vkind = "i64"
# controls what commands will be used in this keyspace
commands = [
	# request a field from a hash
	{ verb = "hget", weight = 30 },
	# set cardinality > 1 to get multiple fields
	{ verb = "hget", weight = 10, cardinality = 5 },

	# increment a value for a field in the hash
	{ verb = "hincrby", weight = 10 },

	# retrieve an entire hash
	{ verb = "hgetall", weight = 5 },

	# delete a field from a hash
	{ verb = "hdel", weight = 10 },
	# set cardinality > 1 to remove multiple fields
	{ verb = "hdel", weight = 5, cardinality = 5 },

	# set a field in the hash
	{ verb = "hset", weight = 20 },
	# set cardinality > 1 to set multiple fields
	{ verb = "hset", weight = 5, cardinality = 5 },

	# delete an entire hash
	{ verb = "delete", weight = 5 }
]

# An example keyspace showcasing the use of the `list` family of commands.
#
# Note that we use the inner key generator to produce `elements` for these
# operations. This provides more control than using the value generator would.
[[workload.keyspace]]
# sets the relative weight of this keyspace: defaults to 1
weight = 1
# sets the length of the key, in bytes
klen = 20
# sets the number of keys that will be generated
nkeys = 1_000_000
# sets the length of the inner key, in bytesp
inner_keys_klen = 4
# sets the number of inner keys that will be generated
inner_keys_nkeys = 1_000
# controls what commands will be used in this keyspace
commands = [
	# retrieves all elements in a list (implemented as `LRANGE [key] 0 -1`)
	{ verb = "list_fetch", weight = 5 },

	# retrieves the length of the list
	{ verb = "llen", weight = 4 },

	# removes and retrieves an element from the back of a list
	{ verb = "rpop", weight = 20 },

	# removes and retrieves an element from the front of a list
	{ verb = "lpop", weight = 20 },

	# pushes an element to the back of a list
	{ verb = "rpush", weight = 5 },
	# with truncate to fuse rpush + ltrim
	{ verb = "rpush", weight = 10, truncate = 10 },
	# with cardinality to push multiple items and tuncate to fuse a ltrim
	{ verb = "rpush", weight = 10, cardinality = 3, truncate = 10 },

	# pushes an element to the front of a list
	{ verb = "lpush", weight = 5 },
	# with truncate to fuse lpush + ltrim
	{ verb = "lpush", weight = 10, truncate = 10 },
	# with cardinality to push multiple items and tuncate to fuse a ltrim
	{ verb = "lpush", weight = 10, cardinality = 3, truncate = 10 },

	# delete an entire list
	{ verb = "delete", weight = 1 },
]

# An example keyspace showcasing the use of the `sorted set` family of commands.
#
# Note that we use the inner key generator to produce `elements` for these
# operations. The values are `f64` so we do not need to specify parameters for
# the value generator.
[[workload.keyspace]]
# sets the relative weight of this keyspace: defaults to 1
weight = 1
# sets the length of the key, in bytes
klen = 16
# sets the number of keys that will be generated
nkeys = 1_000_000
# sets the length of the inner key, in bytes
inner_keys_klen = 4
# sets the number of inner keys that will be generated
inner_keys_nkeys = 1_000
# controls what commands will be used in this keyspace
commands = [
	# adds a member to a sorted set
	{ verb = "zadd", weight = 5 },
	# with cardinality > 1 to add multiple members
	{ verb = "zadd", weight = 5, cardinality = 5 },

	# get a all elements in a sorted set, sorted by index
	{ verb = "zrange", weight = 5 },
	# get a range of elements in a sorted set, by index from 0..end
	{ verb = "zrange", weight = 5, end = 5 },
	# get a range of elements in a sorted set, by index from 5..10
	{ verb = "zrange", weight = 5, start = 5, end = 10 },
	# get a range of elements in a sorted set, by score with scores from -1..1
	{ verb = "zrange", weight = 5, start = -1, end = 1, by_score = true },

	# get the score for a member in a sorted set
	{ verb = "zscore", weight = 5 },
	# with cardinality > 1 to get scores for multiple members
	{ verb = "zmscore", weight = 5, cardinality = 5 },

	# remove a member from a sorted set
	{ verb = "zrem", weight = 2 },
	# with cardinality > 1 to remove multiple members
	{ verb = "zrem", weight = 2, cardinality = 5 },

	# delete an entire sorted set
	{ verb = "delete", weight = 1 },

	# get the rank of a member in a sorted set
	{ verb = "zrank", weight = 40 },

	# adds to the value of a member in a sorted set
	{ verb = "zincrby", weight = 25 },
]

# An example keyspace showcasing the use of the `set` family of commands.
#
# Note that we use the inner key generator to produce `elements` for these
# operations. This provides more control than using the value generator would.
[[workload.keyspace]]
# sets the relative weight of this keyspace: defaults to 1
weight = 1
# sets the length of the key, in bytes
klen = 8
# sets the number of keys that will be generated
nkeys = 1_000_000
# sets the length of the inner key, in bytesp
inner_keys_klen = 4
# sets the number of inner keys that will be generated
inner_keys_nkeys = 1_000
# controls what commands will be used in this keyspace
commands = [
	# adds a member to a set
	{ verb = "sadd", weight = 60 },
	# set the cardinality > 1 to add mutiple members
	{ verb = "sadd", weight = 5, cardinality = 5 },

	# retrieve all members in the set
	{ verb = "smembers", weight = 20},

	## remove a member from the set
	{ verb = "srem", weight = 5},
	# set the cardinality > 1 to remove multiple members
	{ verb = "srem", weight = 5, cardinality = 5 },

	# remove an entire set with delete
	{ verb = "delete", weight = 5 }
]

# To enable mTLS, uncomment the `[tls]` section below.

#[tls]
# set the client's TLS private key for mTLS authentication
#private_key = "path/to/client_key.pem"
# set the client's TLS certificate for mTLS authentication
#certificate = "path/to/client_cert.pem"
# set a path to a root CA PEM, useful if running your own CA
#ca_file = "path/to/root_ca.pem"
# require that the server certifcate and hostname match
#verify_hostname = "true"
