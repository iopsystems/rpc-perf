# An example configuration for testing against a "ping server" such as the
# Pelikan Pingserver. 

[general]
# specify the protocol to be used
# should be one of:
#   ping - ascii ping/pong over TCP (w/ optional TLS)
#   grpc_ping - ping/pong using GRPC over HTTP(s)/2 
#   http2_ping - ping/pong implemented using HTTP(s)/2 GET
protocol = "grpc_ping"
# the interval for stats integration and reporting
interval = 1
# the number of intervals to run the test for
duration = 300
# run the admin thread with a HTTP listener at the address provided, this allows
# stats exposition via HTTP
admin = "127.0.0.1:9090"
# optionally, set an initial seed for the PRNGs used to generate the workload.
# The default is to intialize from the OS entropy pool.
#initial_seed = "0"

#[metrics]
# output file for detailed stats during the run
#output = "stats.json"
# format of the output file (possible values are json, msgpack, parquet)
#format = "json"
# optionally specify batch size for parquet row groups
# only valid for parquet output
#batch_size = 100_000
# optionally specify histogram type (can be standard (default) or sparse)
# only valid for parquet output
#histogram = "sparse"
# optionally, specify the sampling interval for metrics. Input is a string
# with the unit attached; for example "100ms" or "1s". Defaults to 1s.
#interval = "1s"

[debug]
# choose from: error, warn, info, debug, trace
log_level = "info"
# optionally, log to the file below instead of standard out
# log_file = "rpc-perf.log"
# backup file name for use with log rotation
log_backup = "rpc-perf.log.old"
# trigger log rotation when the file grows beyond this size (in bytes). Set this
# option to '0' to disable log rotation.
log_max_size = 1073741824

[target]
# specify one or more endpoints as IP:PORT pairs
endpoints = [
	"http://127.0.0.1:8080",
]

[client]
# number of threads used to drive client requests
threads = 4
# the total number of connections to each endpoint
poolsize = 100
# the connect timeout in milliseconds
connect_timeout = 10000
# set the timeout in milliseconds
request_timeout = 1000

[workload]
# the number of threads that will be used to generate the workload
threads = 1

[workload.ratelimit]
# set a global ratelimit for the workload
#start = 1

# Note, even though the command does not use keys, it's still a member of a
# keyspace.
[[workload.keyspace]]
# controls what commands will be used in this keyspace
commands = [
	# sends a `PING` and expects a `PONG`
	{ verb = "ping", weight = 100 },
]

# To enable mTLS, uncomment the `[tls]` section below.

#[tls]
# set the client's TLS private key for mTLS authentication
#private_key = "path/to/client_key.pem"
# set the client's TLS certificate for mTLS authentication
#certificate = "path/to/client_cert.pem"
# set a path to a root CA PEM, useful if running your own CA
#ca_file = "path/to/root_ca.pem"
# require that the server certifcate and hostname match
#verify_hostname = "true"
